AbstractApplicationContext.refresh();
    容器的刷新和初始化
    1、prepareRefresh();
    容器刷新前的预处理工作
        1.1）、initPropertySources();初始化上下文环境中的属性源，默认未实现，由子类实现个性化的属性设置
        1.2）、getEnvironment().validateRequiredProperties();验证通过setRequiredProperties设置的属性在环境中存在
        1.3）、保存预刷新的应用程序监听器earlyApplicationListeners；初始化earlyApplicationEvents，保存容器的一些预刷新事件
    2、obtainFreshBeanFactory();
        获取并刷新BeanFactory
        2.1）、refreshBeanFactory();
            刷新BeanFactory，由子类实现。默认的子类实现有：
            2.1.1）、AbstractRefreshableApplicationContext.refreshBeanFactory()
                销毁原有的BeanFactory并重新创建新的BeanFactory，调用loadBeanDefinitions(DefaultListableBeanFactory beanFactory)加载BeanDefinition，
                此方法由子类中实现：
                AbstractXmlApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory beanFactory)
                XmlWebApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory beanFactory)
                AnnotationConfigWebApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory beanFactory)
                GroovyWebApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory beanFactory)
            2.1.2）、GenericApplicationContext.refreshBeanFactory()
                在无参构造器中初始化BeanFactory
                public GenericApplicationContext() {
                    this.beanFactory = new DefaultListableBeanFactory();
                }
                并设置BeanFactory的序列化serializationId
        2.2）、ConfigurableListableBeanFactory getBeanFactory();
                返回刚才创建的BeanFactory对象，由子类实现
                AbstractRefreshableApplicationContext.getBeanFactory();
                GenericApplicationContext.getBeanFactory();
    3、prepareBeanFactory(ConfigurableListableBeanFactory beanFactory);
        BeanFactory的预准备工作
        3.1）、设置BeanFactory的类加载器、表达式解析器、属性编辑器
        3.2）、添加ApplicationContextAwareProcessor，在bean初始化之前调用postProcessBeforeInitialization(final Object bean, String beanName)
            方法->invokeAwareInterfaces(Object bean)增加内置类(EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、
            ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware)的注入工作
        3.3）、设置忽略自动装配的接口(EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、
            ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware)
        3.4）、设置可以解析的自动装配，可在任何IOC组件中自动注入(BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext)
        3.5）、添加ApplicationListenerDetector的BeanPostProcessor
        3.6）、增加对AspectJ的支持
        3.7）、添加默认的系统环境(environment(ConfigurableEnvironment)、systemProperties(Map<String, Object>)、systemEnvironment(Map<String, Object>))
    4、postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);
        BeanFactory的后置处理器，BeanDefinition信息加载完成之后，bean实例化之前调用，
        默认未实现，由子类提供实现，系统提供的子类实现：
        AbstractRefreshableWebApplicationContext、GenericWebApplicationContext、ResourceAdapterApplicationContext、StaticWebApplicationContext
    5、invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory);
        BeanFactory的后置处理器，BeanDefinition信息加载完成之后，bean实例化之前调用，
        BeanFactoryPostProcessor.postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory);
        BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry);
        5.1）、先执行BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)方法；
            5.1.1）、获取所有的BeanDefinitionRegistryPostProcessor；
            5.1.2）、先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor；
            5.1.3）、再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；
            5.1.4）、最后执行没有实现任何优先级和顺序接口的BeanDefinitionRegistryPostProcessor；
        5.2）、再执行BeanFactoryPostProcessor.postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)方法。
            5.2.1）、获取所有的BeanFactoryPostProcessor；
            5.2.2）、先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor；
            5.2.3）、再执行实现了Ordered顺序接口的BeanFactoryPostProcessor；
            5.2.4）、最后执行没有实现任何优先级和顺序接口的BeanFactoryPostProcessor；
    6、registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory);
        注册拦截Bean创建的Bean的后处理器(BeanPostProcessor)，此功能有代理类PostProcessorRegistrationDelegate实现
        registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)
        BeanPostProcessor在系统中有5个实现接口，不同的接口在bean创建前后的执行时机是不一样的
        BeanPostProcessor
            -> DestructionAwareBeanPostProcessor
            -> InstantiationAwareBeanPostProcessor
                -> SmartInstantiationAwareBeanPostProcessor
            -> MergedBeanDefinitionPostProcessor
        6.1）、获取所有的BeanPostProcessor的beanName，后置处理器都默认可以通过实现PriorityOrdered、Ordered接口改变优先级
        6.2）、注册BeanPostProcessorChecker后置处理器
        6.3）、处理获取的BeanPostProcessor的beanName
            6.3.1）、将实现接口PriorityOrdered的BeanPostProcessor添加到priorityOrderedPostProcessors集合中
            6.3.2）、将实现接口PriorityOrdered的MergedBeanDefinitionPostProcessor添加到internalPostProcessors集合中
            6.3.3）、将实现接口Ordered的beanName添加到orderedPostProcessorNames集合中
            6.3.4）、将没有实现任何优先级接口的beanName添加到nonOrderedPostProcessorNames集合中
        6.4）、对集合priorityOrderedPostProcessors按照优先级排序并将其注册到BeanFactory中
        6.5）、循环处理集合orderedPostProcessorNames，将beanName对应的BeanPostProcessor添加到orderedPostProcessors集合中，
            并将MergedBeanDefinitionPostProcessor类型的BeanPostProcessor添加到internalPostProcessors集合中
        6.6）、对集合orderedPostProcessors按照优先级排序并将其注册到BeanFactory中
        6.7）、循环处理集合nonOrderedPostProcessorNames，将beanName对应的BeanPostProcessor添加到nonOrderedPostProcessors集合中，
            并将MergedBeanDefinitionPostProcessor类型的BeanPostProcessor添加到internalPostProcessors集合中
        6.8）、将集合nonOrderedPostProcessors注册到BeanFactory中
        6.9）、对集合internalPostProcessors按照优先级排序并将其注册到BeanFactory中
        6.10）、注册ApplicationListenerDetector后置处理器，在bean创建完成后，若bean是ApplicationListener且是单例模式
            则this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);
7、initMessageSource();初始化上下文的消息源MessageSource组件，用于国际化功能、消息绑定、消息解析
    7.1）、获取BeanFactory容器中id为messageSource，类型为MessageSource的组件；
        如果有赋值给messageSource，如果没有创建DelegatingMessageSource；
        MessageSource：按照区域信息获取国际化配置文件中某个key的值
    7.2）、把创建的DelegatingMessageSource注册到容器中，如果有父容器且有父消息源，设置消息源的父消息源
8、initApplicationEventMulticaster();